// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package KDTreeEncoding

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KDTree struct {
	_tab flatbuffers.Table
}

func GetRootAsKDTree(buf []byte, offset flatbuffers.UOffsetT) *KDTree {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KDTree{}
	x.Init(buf, n+offset)
	return x
}

func FinishKDTreeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsKDTree(buf []byte, offset flatbuffers.UOffsetT) *KDTree {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KDTree{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedKDTreeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *KDTree) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KDTree) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KDTree) VersionNumber() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KDTree) MutateVersionNumber(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *KDTree) Dimensions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KDTree) MutateDimensions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *KDTree) InorderIndices(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KDTree) InorderIndicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KDTree) MutateInorderIndices(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *KDTree) Items(obj *Item, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KDTree) ItemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func KDTreeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KDTreeAddVersionNumber(builder *flatbuffers.Builder, versionNumber uint32) {
	builder.PrependUint32Slot(0, versionNumber, 0)
}
func KDTreeAddDimensions(builder *flatbuffers.Builder, dimensions uint32) {
	builder.PrependUint32Slot(1, dimensions, 0)
}
func KDTreeAddInorderIndices(builder *flatbuffers.Builder, inorderIndices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(inorderIndices), 0)
}
func KDTreeStartInorderIndicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KDTreeAddItems(builder *flatbuffers.Builder, items flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(items), 0)
}
func KDTreeStartItemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KDTreeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
